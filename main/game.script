local CO = require "main.constants"
local UT = require "main.utils"
local MA = require "main.match"
local ST = require "main.storage"
local AI = require "main.ai"
local PO = require "popup.popup"
local FL = require "ludobits.m.flow"
local MO = require "monarch.monarch"
local BO = require "main.board"
local PL = require "main.players"

local checkingSingleGlyph = false
local swapping = false
local checkingGlyphs = false
local inputDisabled = false
local aiRunning = false
local gameEnded = false

function init(self)	
	msg.post(".", "acquire_input_focus")
end

function final(self)
	-- cleanup
	MA.resetState()
	FL.stop()
end

function update(self, dt)

end

-- callback after freezing a glyph
local function freezeGlyphCompletedP2()
	UT.log("2 freeze completed")
	-- recheck for other matches, can happen after a board swapBoard
	-- pass back true so we will generate a new glyph
	checkMatchingGlyph(CO.PLAYER2, true)
end

-- callback after freezing a glyph
local function freezeGlyphCompletedP1()
	UT.log("1 freeze completed")
	-- recheck for other matches, can happen after a board swapBoard
	-- pass back true so we will generate a new glyph
	checkMatchingGlyph(CO.PLAYER1, true)
end

-- returns the callback for the given player
local function getFreezeGlyphCompletedCallback(player)
	if(player == CO.PLAYER1) then
		return freezeGlyphCompletedP1
	elseif(player == CO.PLAYER2) then
		return freezeGlyphCompletedP2
	end
end

-- check for a match for the given player
-- anyFound is set after finding a match in the freeze completed callback
-- used to know if we need to generate a new glyph
function checkMatchingGlyph(player, anyFound)
	UT.log(player .. " check match")
	checkingSingleGlyph = true
	local glyph = MA.getPlayers().getGlyph(player)
	local match = MA.getBoard().checkMatchingGlyph(player, glyph, false)
	if(match ~= nil) then
		-- freeze the match on the board
		local points = MA.getPlayers().getPoints(player)
		MA.getPlayers().setPoints(player, points + 1)
		UT.log(player .. " MATCH FOUND points " .. points .. " -> " .. (points+1))
		msg.post("game:/gui#gui_ingame", CO.MESSAGE_UPDATESCORE)
		MA.getBoard().setGlyphCompleted(match, glyph, MA.isMarathon(), getFreezeGlyphCompletedCallback(player))
	else
		UT.log(player .. " match not found")
		if(anyFound) then
			UT.log(player .. " NEW GLYPH")
			MA.newGlyph(player)
			-- recheck
			checkMatchingGlyph(player, false)
		else
			-- no match, no previous match -> end
			checkingSingleGlyph = false
		end
	end
end

local function isCheckingSingleGlyphOngoing()
	return not checkingSingleGlyph
end

--check for a match for both players
local function checkMatchingGlyphs()
	checkingGlyphs = true
	UT.log("1-2 check match")
	-- execute the checks one after the other and not in paralles as it would happen without using FLOW
	FL.start(function()
		checkMatchingGlyph(CO.PLAYER1)
		FL.until_true(isCheckingSingleGlyphOngoing)
		checkMatchingGlyph(CO.PLAYER2)
		FL.until_true(isCheckingSingleGlyphOngoing)
		checkingGlyphs = false
		UT.log("1-2 check match completed")
	end)
end

-- check if any player can complete a glyph
-- if both can't, game ends
local function checkEndGame()
	UT.log("check end game")
	local glyph = MA.getPlayers().getGlyph(CO.PLAYER1)
	local matchPossiblePlayer1 = MA.getBoard().checkMatchingGlyph(CO.PLAYER1, glyph, true)
	glyph = MA.getPlayers().getGlyph(CO.PLAYER2)
	local matchPossiblePlayer2 = MA.getBoard().checkMatchingGlyph(CO.PLAYER2, glyph, true)
	return not (matchPossiblePlayer1 or matchPossiblePlayer2)
end

local function handleEndGame()
	UT.log("game ends")
	gameEnded = true
	local points1 = MA.getPlayers().getPoints(CO.PLAYER1)
	local points2 = MA.getPlayers().getPoints(CO.PLAYER2)
	local text
	if(points1 > points2) then
		text = "PLAYER 1 WINS!"
	elseif(points2 > points1) then
		text = "PLAYER 2 WINS!"
	else
		text = "DRAW!"
	end
	MO.show(PO.INFORMATION_POPUP, {}, 
		{text=text, okCallback=function()
			MO.back()
		end}
	)
end

-- callback for the swap board
local function swapCompleted() 
	swapping = false
	UT.log("swap completed")
end

local function isSwapCompleted()
	return not swapping
end

--swap the board
local function swapBoard()
	UT.log("swap")
	swapping = true
	MA.getBoard().swapBoard(swapCompleted)
end

local function isInputDisabled()
	return inputDisabled
end

local function checkingGlyphsCompleted()
	return not checkingGlyphs
end

local function isAIRunning()
	return aiRunning
end

local function isGameEnded()
	return gameEnded
end

local function executeAIFlow()
	aiRunning = true
	executeAI()
	FL.until_true(isAIRunning)
end

local function checkAndSwapFlow()
	checkMatchingGlyphs()
	FL.until_true(checkingGlyphsCompleted)
	if(MA.isSwapTriggered()) then
		swapBoard()
		FL.until_true(isSwapCompleted)
		checkMatchingGlyphs()
		FL.until_true(checkingGlyphsCompleted)
	end
	MA.setCurrentPlayer(MA.getNextPlayer())
	BO.setCurrentPlayerOrb(MA.getCurrentPlayer())
	MA.saveGame()
	if(checkEndGame()) then
		handleEndGame()
	else
		if(MA.getPlayers().getType(MA.getCurrentPlayer()) ~= CO.SETTINGS_PLAYER_TYPE_HUMAN) then
			executeAIFlow()
		end
	end
	inputDisabled = false
end

local function processPlayerInput(currentPlayer, tile)
	inputDisabled = true
	if(MA.getBoard().isOnBoard(tile)) then
		local cell = MA.getBoard().getCell(tile)
		if(cell == nil) then
			-- empty cell
			UT.log(currentPlayer .. " orb placed")
			MA.getBoard().setCell(tile, currentPlayer)
			msg.post("controller:/controller", CO.SOUND_DROP)
			-- input reenabled inside the flow
			-- player changed inside the flow
			FL.start(checkAndSwapFlow)
			BO.scanBoard(currentPlayer, PL.getGlyph(currentPlayer))
		else
			inputDisabled = false
		end			
	else
		inputDisabled = false
	end
end

function executeAI()
	UT.log("execute AI")
	local tile = AI.think(MA.getCurrentPlayer())
	if(tile ~= nil) then
		processPlayerInput(MA.getCurrentPlayer(), tile)
	end
	aiRunning = false
end

function on_message(self, message_id, message, sender)
	if(message_id == hash(CO.MESSAGE_NEWGAME)) then
		UT.log("new game")
		MA.newMatch()
		BO.setCurrentPlayerOrb(MA.getCurrentPlayer())
		if(MA.getPlayers().getType(MA.getCurrentPlayer()) ~= CO.SETTINGS_PLAYER_TYPE_HUMAN) then
			FL.start(executeAIFlow)
		end
	end
	if(message_id == hash(CO.MESSAGE_RESUMEGAME)) then
		UT.log("resume game")
		MA.loadGame()
		BO.setCurrentPlayerOrb(MA.getCurrentPlayer())
		msg.post("game:/gui#gui_ingame", CO.MESSAGE_UPDATESCORE)
		if(checkEndGame()) then
			handleEndGame()
		else
			if(MA.getPlayers().getType(MA.getCurrentPlayer()) ~= CO.SETTINGS_PLAYER_TYPE_HUMAN) then
				FL.start(executeAIFlow)
			end
		end
	end
	if(message_id == hash(CO.MESSAGE_LOADSETTINGS)) then
		MA.loadSettings()
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if(isInputDisabled() or isGameEnded()) then
			return
		end
		currentPlayer = MA.getCurrentPlayer()
		if(MA.getPlayers().getType(currentPlayer) == CO.SETTINGS_PLAYER_TYPE_HUMAN) then
			local x = action.screen_x
			local y = action.screen_y
			local pos = UT.getWorldPos(x, y)
			local tile = UT.getTile(pos)
			processPlayerInput(currentPlayer, tile)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

